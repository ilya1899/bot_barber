# app/handlers/admin/handler_calendar.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter  # –î–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
from datetime import date, datetime, timedelta
from typing import List, Tuple, Optional

from app.keyboards.kbreply import admin_menu_keyboard
from app.keyboards.kbinline import adminCalendarKeyboard, adminDayBookingsKeyboard  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
from app.database import requests as db_requests

admin_calendar_router = Router()


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∞–¥–º–∏–Ω–∞ ---
class AdminCalendarState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π."""
    waitingForDateSelection = State()
    viewingBookingsForDate = State()


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ö–∞–ª–µ–Ω–¥–∞—Ä—è ---
@admin_calendar_router.message(F.text == "–ö–∞–ª–µ–Ω–¥–∞—Ä—å")
async def handlerAdminCalendarMenu(message: Message, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π.
    """
    if not await db_requests.isUserAdmin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return

    await state.clear()  # –û—á–∏—â–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer(
        """–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π:""",
        reply_markup=adminCalendarKeyboard()  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü, —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã
    )
    await state.set_state(AdminCalendarState.waitingForDateSelection)


@admin_calendar_router.callback_query(F.data == "adminBackToAdminMenuFromCalendar")
async def handlerAdminBackToAdminMenuFromCalendar(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
    """
    if not await db_requests.isUserAdmin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    await state.clear()
    await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
    await callback.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=admin_menu_keyboard)
    await callback.answer()


# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –≤—ã–±–æ—Ä –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ ---
@admin_calendar_router.callback_query(
    AdminCalendarState.waitingForDateSelection,
    F.data.startswith("adminCalYear_") | F.data.startswith("adminCalMonth_") | F.data.startswith("adminCalDate_")
)
async def handlerAdminCalendarNavigationOrSelection(callback: CallbackQuery, state: FSMContext):
    """
    –ï–¥–∏–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.
    """
    if not await db_requests.isUserAdmin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    user_data = await state.get_data()
    current_calendar_display_date: date = user_data.get('calendar_display_date', date.today())

    action_data = callback.data.split("_")
    action_type = action_data[0]
    value = action_data[1]

    new_calendar_display_date = current_calendar_display_date  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –¥–∞—Ç–∞

    if action_type == "adminCalYear":
        new_year = int(value)
        new_calendar_display_date = current_calendar_display_date.replace(year=new_year)
    elif action_type == "adminCalMonth":
        new_calendar_display_date = datetime.strptime(value, "%Y-%m").date()
    elif action_type == "adminCalDate":
        chosen_date = datetime.strptime(value, "%Y-%m-%d").date()

        if chosen_date < date.today():  # –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É
            await callback.answer("–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –∏–ª–∏ –±—É–¥—É—â—É—é –¥–∞—Ç—É.",
                                  show_alert=True)
            return

        await state.update_data(chosenCalendarDate=chosen_date)
        await displayDayBookings(callback.message, state)  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
        await callback.answer()
        return  # –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å

    await state.update_data(calendar_display_date=new_calendar_display_date)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–π –¥–∞—Ç—ã
    await callback.message.edit_reply_markup(reply_markup=adminCalendarKeyboard(new_calendar_display_date))
    await callback.answer()


@admin_calendar_router.callback_query(
    AdminCalendarState.viewingBookingsForDate,  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π
    F.data == "adminBackToCalendarSelection"
)
async def handlerAdminBackToCalendarSelection(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π.
    """
    if not await db_requests.isUserAdmin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    user_data = await state.get_data()
    current_calendar_display_date = user_data.get('calendar_display_date', date.today())

    await state.update_data(chosenCalendarDate=None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    await callback.message.edit_text(
        """–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π:""",
        reply_markup=adminCalendarKeyboard(current_calendar_display_date)
    )
    await state.set_state(AdminCalendarState.waitingForDateSelection)
    await callback.answer()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∑–∞ –¥–µ–Ω—å ---
async def displayDayBookings(message: Message, state: FSMContext):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º.
    """
    user_data = await state.get_data()
    chosen_date: date = user_data.get('chosenCalendarDate')

    if not chosen_date:
        await message.edit_text("–û—à–∏–±–∫–∞: –î–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await message.answer(
            """–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π:""",
            reply_markup=adminCalendarKeyboard()
        )
        await state.set_state(AdminCalendarState.waitingForDateSelection)
        return

    bookings_for_day = await db_requests.getBookingsForDate(chosen_date)

    if not bookings_for_day:
        bookings_text = f"""üóìÔ∏è –ó–∞–ø–∏—Å–∏ –Ω–∞ <b>{chosen_date.strftime('%d.%m.%Y')}</b>:

–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É."""
    else:
        bookings_text = f"""üóìÔ∏è –ó–∞–ø–∏—Å–∏ –Ω–∞ <b>{chosen_date.strftime('%d.%m.%Y')}</b>:

"""
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º
        bookings_by_barber = {}
        for booking in bookings_for_day:
            barber_name = booking.barber.name if booking.barber else "–ë–µ–∑ –º–∞—Å—Ç–µ—Ä–∞"
            if barber_name not in bookings_by_barber:
                bookings_by_barber[barber_name] = []
            bookings_by_barber[barber_name].append(booking)

        for barber_name, bookings in bookings_by_barber.items():
            bookings_text += f"<b>–ú–∞—Å—Ç–µ—Ä: {barber_name}</b>\n"
            for booking in sorted(bookings, key=lambda b: b.booking_date):  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                service_name = booking.service.name if booking.service else "–£—Å–ª—É–≥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                booking_time = booking.booking_date.strftime('%H:%M')
                bookings_text += f"  - {booking_time} - {service_name} ({booking.service.price} —Ä—É–±.)\n"
            bookings_text += "\n"  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –º–∞—Å—Ç–µ—Ä–∞–º–∏

    await message.edit_text(
        bookings_text,
        reply_markup=adminDayBookingsKeyboard()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    )
    await state.set_state(AdminCalendarState.viewingBookingsForDate)