from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.keyboards.kbreply import main_menu_keyboard
from app.keyboards.kbinline import continue_registration_keyboard
from app.database import requests as db_requests

start_router = Router()

class RegistrationState(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()

@start_router.message(CommandStart())
async def handler_start(message: Message, session_maker: callable, state: FSMContext):
    async with session_maker() as session:
        user = await db_requests.get_user(session, message.from_user.id)
        if not user or not user.first_name or not user.phone_number:
            await message.answer(
                """<b>–ü—Ä–∏–≤–µ—Ç!</b> üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–∞—Ä–±–µ—Ä—à–æ–ø!
            –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º <i>–ª—É—á—à–∏–µ</i> —Å—Ç—Ä–∏–∂–∫–∏ –∏ –±—Ä–∏—Ç—å–µ –≤ –≥–æ—Ä–æ–¥–µ.
            –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.""",
                reply_markup=continue_registration_keyboard
            )
            await state.set_state(RegistrationState.waiting_for_name)
        else:
            await message.answer(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}! üëã",
                reply_markup=main_menu_keyboard
            )
