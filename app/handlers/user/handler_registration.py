# app/handlers/user/handler_registration.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.keyboards.kbreply import request_contact_keyboard, main_menu_keyboard
from app.keyboards.kbinline import continue_registration_keyboard
from app.database import requests as db_requests

registration_router = Router()

class RegistrationState(StatesGroup):
    waitingForName = State()
    waitingForPhone = State()

@registration_router.callback_query(F.data == "continueRegistration")
async def handlerContinueRegistration(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é".
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(RegistrationState.waitingForName)
    await callback.answer()

@registration_router.message(RegistrationState.waitingForName)
async def handlerGetName(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    user_name = message.text.strip()
    if not user_name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
        return

    await state.update_data(registrationName=user_name) # camelCase –¥–ª—è –∫–ª—é—á–∞ –≤ state
    await message.answer(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name}!\n"
        "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.",
        reply_markup=request_contact_keyboard
    )
    await state.set_state(RegistrationState.waitingForPhone)

@registration_router.message(RegistrationState.waitingForPhone, F.contact)
async def handlerGetPhone(message: Message, state: FSMContext): # session_maker —É–¥–∞–ª–µ–Ω
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º".
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î.
    """
    phone_number = message.contact.phone_number
    user_id = message.from_user.id
    user_data = await state.get_data()
    user_name = user_data.get('registrationName', message.from_user.first_name) # camelCase –¥–ª—è –∫–ª—é—á–∞

    # –í—ã–∑–æ–≤—ã db_requests –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ —Å–µ—Å—Å–∏–∏
    user = await db_requests.addUser(
        user_id=user_id,
        username=message.from_user.username,
        firstName=user_name,
        lastName=message.from_user.last_name
    )
    await db_requests.updateUserPhone(user_id, phone_number)

    await message.answer(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéâ\n"
        "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Å–ª—É–≥–∞—Ö –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É.",
        reply_markup=main_menu_keyboard
    )
    await state.clear()

@registration_router.message(RegistrationState.waitingForPhone)
async def handlerGetPhoneText(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –∫–æ–≥–¥–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")