from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from datetime import date, datetime
import calendar

from app.keyboards.kbreply import main_menu_keyboard
from app.keyboards.kbinline import (
    services_keyboard,
    calendar_keyboard,
    time_slots_keyboard,
    get_final_booking_card_content,
    barbers_keyboard
)
from app.database import requests as db_requests
from app.database.models import Service, Booking, Barber
from config import AVAILABLE_TIME_SLOTS

appointment_router = Router()

class BookingState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –∏ —É–¥–æ–±—Å—Ç–≤–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ FSM)."""
    choosingService = State()
    choosingDate = State()
    choosingTime = State()
    choosingBarber = State()
    confirmingBooking = State()


@appointment_router.message(F.text == "üíà –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def handlerBookAppointment(message: Message):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É.
    """
    user = await db_requests.getUser(message.from_user.id)
    if not user or not user.first_name or not user.phone_number:
        await message.answer(
            """–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.""",
            reply_markup=main_menu_keyboard
        )
        return

    services = await db_requests.getServices()
    if not services:
        await message.answer(
            """–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.""",
            reply_markup=main_menu_keyboard
        )
        return

    await message.answer(
        """–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:""",
        reply_markup=services_keyboard(services)
    )


@appointment_router.callback_query(F.data.startswith("chooseService_"))
async def handlerChooseService(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏.
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É.
    """
    service_id = int(callback.data.split("_")[1])
    service = await db_requests.getServiceById(service_id)
    if not service:
        all_services = await db_requests.getServices()
        await callback.message.edit_text(
            """–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.""",
            reply_markup=services_keyboard(all_services)
        )
        await callback.answer("–û—à–∏–±–∫–∞: —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º –∏ callback_data –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è choosingDate
    await callback.message.edit_text(
        """–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:""",
        reply_markup=calendar_keyboard()
    )
    await callback.answer("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É.")


@appointment_router.callback_query(F.data.startswith("navigateMonth_"))
async def handlerNavigateMonth(callback: CallbackQuery):
    """
    –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.
    """
    new_month_str = callback.data.split("_")[1]
    new_date = datetime.strptime(new_month_str, "%Y-%m").date()
    await callback.message.edit_reply_markup(reply_markup=calendar_keyboard(new_date))
    await callback.answer()


@appointment_router.callback_query(F.data.startswith("navigateYear_"))
async def handlerNavigateYear(callback: CallbackQuery):
    """
    –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–æ–¥–∞–º –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.
    """
    new_year = int(callback.data.split("_")[1])
    # –í callback_data –ª—É—á—à–µ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è –ø–æ–∫–∞–∑–∞
    # –ó–¥–µ—Å—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_date = date.today()
    try:
        new_date = current_date.replace(year=new_year)
    except ValueError:
        # –ù–∞ —Å–ª—É—á–∞–π 29 —Ñ–µ–≤—Ä–∞–ª—è
        new_date = current_date.replace(year=new_year, day=28)
    await callback.message.edit_reply_markup(reply_markup=calendar_keyboard(new_date))
    await callback.answer()


@appointment_router.callback_query(F.data.startswith("chooseDate_"))
async def handlerChooseDate(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è.
    """
    chosen_date_str = callback.data.split("_")[1]
    chosen_date = datetime.strptime(chosen_date_str, "%Y-%m-%d").date()

    if chosen_date < date.today():
        await callback.answer(
            """–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.""",
            show_alert=True
        )
        return

    await callback.message.edit_text(
        f"""–í—ã –≤—ã–±—Ä–∞–ª–∏ {chosen_date.strftime('%d.%m.%Y')}.\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:""",
        reply_markup=time_slots_keyboard(AVAILABLE_TIME_SLOTS)
    )
    await callback.answer()


@appointment_router.callback_query(F.data.startswith("chooseTime_"))
async def handlerChooseTime(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞.
    –í callback.data –æ–∂–∏–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "chooseTime_{HH:MM}_{YYYY-MM-DD}_{service_id}".
    """
    parts = callback.data.split("_")
    if len(parts) < 4:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    chosen_time_str = parts[1]
    chosen_date_str = parts[2]
    service_id = int(parts[3])

    chosen_date = datetime.strptime(chosen_date_str, "%Y-%m-%d").date()

    barbers = await db_requests.getBarbers()
    service = await db_requests.getServiceById(service_id)
    if not service:
        await callback.message.edit_text(
            """–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.""",
            reply_markup=main_menu_keyboard
        )
        await callback.answer()
        return

    if not barbers:
        # –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ ‚Äî —Å—Ä–∞–∑—É –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —Å "–õ—é–±—ã–º –º–∞—Å—Ç–µ—Ä–æ–º"
        final_card_text, final_card_keyboard = get_final_booking_card_content(
            service_name=service.name,
            chosen_date=chosen_date,
            chosen_time=chosen_time_str,
            barber_name="–õ—é–±–æ–π –º–∞—Å—Ç–µ—Ä"
        )
        await callback.message.edit_text(final_card_text, reply_markup=final_card_keyboard)
    else:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞
        await callback.message.edit_text(
            """–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:""",
            reply_markup=barbers_keyboard(barbers)
        )
    await callback.answer()


@appointment_router.callback_query(F.data.startswith("chooseBarber_"))
async def handlerChooseBarber(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å.
    –í callback.data –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "chooseBarber_{barber_id}_{YYYY-MM-DD}_{HH:MM}_{service_id}"
    barber_id –º–æ–∂–µ—Ç –±—ã—Ç—å "any".
    """
    parts = callback.data.split("_")
    if len(parts) < 5:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    barber_id_str = parts[1]
    chosen_date_str = parts[2]
    chosen_time_str = parts[3]
    service_id = int(parts[4])

    barber_id = None if barber_id_str == "any" else int(barber_id_str)
    chosen_date = datetime.strptime(chosen_date_str, "%Y-%m-%d").date()

    service = await db_requests.getServiceById(service_id)
    if not service:
        await callback.message.edit_text(
            """–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.""",
            reply_markup=main_menu_keyboard
        )
        await callback.answer()
        return

    barber_name = "–õ—é–±–æ–π –º–∞—Å—Ç–µ—Ä"
    if barber_id:
        barber = await db_requests.getBarberById(barber_id)
        if barber:
            barber_name = barber.name

    final_card_text, final_card_keyboard = get_final_booking_card_content(
        service_name=service.name,
        chosen_date=chosen_date,
        chosen_time=chosen_time_str,
        barber_name=barber_name
    )
    await callback.message.edit_text(final_card_text, reply_markup=final_card_keyboard)
    await callback.answer()


@appointment_router.callback_query(F.data == "confirmBooking")
async def handlerConfirmFinalBooking(callback: CallbackQuery):
    """
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é.
    –í callback.message.text —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è,
    –ª–∏–±–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ callback_data –∏–ª–∏ context.
    –ó–¥–µ—Å—å –ø—Ä–∏–º–µ—Ä —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ callback_data –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω ‚Äî
    –Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥ —Ç–≤–æ–∏ –Ω—É–∂–¥—ã.
    """
    user_id = callback.from_user.id

    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å service_id, booking_datetime, barber_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    # –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç FSMContext, –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ:
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫—ç—à –≤ –ø–∞–º—è—Ç–∏, –ë–î, Redis, –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ callback_data.
    # –ù–∏–∂–µ ‚Äî –∑–∞–≥–ª—É—à–∫–∞ —Å –æ—à–∏–±–∫–æ–π, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç:
    await callback.answer(
        """–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏. 
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∑–∞–Ω–æ–≤–æ.""",
        show_alert=True
    )
    await callback.message.edit_text(
        """–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.""",
        reply_markup=main_menu_keyboard
    )


@appointment_router.callback_query(F.data == "deleteBooking")
async def handlerDeleteFinalBooking(callback: CallbackQuery):
    """
    –û—Ç–º–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏.
    """
    await callback.message.edit_text("–í—ã —É–¥–∞–ª–∏–ª–∏ –∑–∞–ø–∏—Å—å.")
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    await callback.answer("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")


@appointment_router.callback_query(F.data == "cancelForm")
async def handlerCancelForm(callback: CallbackQuery):
    """
    –û–±—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã.
    """
    await callback.message.edit_text("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")


@appointment_router.callback_query(F.data == "mainMenu")
async def handlerMainMenuInline(callback: CallbackQuery):
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    await callback.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")


@appointment_router.callback_query(F.data == "ignore")
async def handlerIgnoreCallback(callback: CallbackQuery):
    """
    –ü—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞.
    """
    await callback.answer()


@appointment_router.callback_query(F.data == "backToMainMenu")
async def handlerBackToMainMenu(callback: CallbackQuery):
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    await callback.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
