from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import date, datetime, timedelta
import calendar

from app.keyboards.kbreply import main_menu_keyboard
from app.keyboards.kbinline import services_keyboard, calendar_keyboard, time_slots_keyboard, get_final_booking_card_content, barbers_keyboard
from app.database import requests as db_requests
from app.database.models import Service, Booking, Barber
from config import AVAILABLE_TIME_SLOTS

appointment_router = Router()

class BookingState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É."""
    choosingService = State()
    choosingDate = State()
    choosingTime = State()
    choosingBarber = State()
    confirmingBooking = State()


@appointment_router.message(F.text == "üíà –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def handler_book_appointment(message: Message, state: FSMContext, session_maker: callable):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É.
    """
    async with session_maker() as session:
        user = await db_requests.get_user(session, message.from_user.id)
        if not user or not user.first_name or not user.phone_number:
            await message.answer(
                "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                reply_markup=main_menu_keyboard
            )
            await state.clear()
            return

        services = await db_requests.get_services(session)
        if not services:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                 reply_markup=main_menu_keyboard)
            await state.clear()
            return

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=services_keyboard(services))
        await state.set_state(BookingState.choosingService)


@appointment_router.callback_query(BookingState.choosingService, F.data.startswith("chooseService_"))
async def handler_choose_service(callback: CallbackQuery, state: FSMContext, session_maker: callable):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É.
    """
    service_id = int(callback.data.split("_")[1])

    async with session_maker() as session:
        service = await db_requests.get_service_by_id(session, service_id)
        if not service:
            all_services = await db_requests.get_services(session)
            await callback.message.edit_text("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.",
                                             reply_markup=services_keyboard(all_services))
            await callback.answer("–û—à–∏–±–∫–∞: —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

    await state.update_data(chosen_service_id=service_id, chosen_service_name=service.name)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=calendar_keyboard())
    await state.set_state(BookingState.choosingDate)
    await callback.answer()


@appointment_router.callback_query(BookingState.choosingDate, F.data.startswith("navigateMonth_"))
async def handler_navigate_month(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –º–µ—Å—è—Ü–∞–º –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.
    """
    new_month_str = callback.data.split("_")[1]
    new_date = datetime.strptime(new_month_str, "%Y-%m").date()
    await callback.message.edit_reply_markup(reply_markup=calendar_keyboard(new_date))
    await callback.answer()


@appointment_router.callback_query(BookingState.choosingDate, F.data.startswith("navigateYear_"))
async def handler_navigate_year(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –≥–æ–¥–∞–º –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.
    """
    new_year = int(callback.data.split("_")[1])
    current_state_data = await state.get_data()
    current_calendar_date = current_state_data.get('calendar_display_date', date.today())
    new_date = current_calendar_date.replace(year=new_year)
    await state.update_data(calendar_display_date=new_date)
    await callback.message.edit_reply_markup(reply_markup=calendar_keyboard(new_date))
    await callback.answer()


@appointment_router.callback_query(BookingState.choosingDate, F.data.startswith("chooseDate_"))
async def handler_choose_date(callback: CallbackQuery, state: FSMContext, session_maker: callable):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è.
    """
    chosen_date_str = callback.data.split("_")[1]
    chosen_date = datetime.strptime(chosen_date_str, "%Y-%m-%d").date()

    if chosen_date < date.today():
        await callback.answer("–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.", show_alert=True)
        return

    await state.update_data(chosen_date=chosen_date)

    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {chosen_date.strftime('%d.%m.%Y')}.\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=time_slots_keyboard(AVAILABLE_TIME_SLOTS)
    )
    await state.set_state(BookingState.choosingTime)
    await callback.answer()


@appointment_router.callback_query(BookingState.choosingTime, F.data.startswith("chooseTime_"))
async def handler_choose_time(callback: CallbackQuery, state: FSMContext, session_maker: callable):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞.
    """
    chosen_time_str = callback.data.split("_")[1]
    user_data = await state.get_data()
    chosen_date: date = user_data.get('chosen_date')
    chosen_service_id: int = user_data.get('chosen_service_id')
    chosen_service_name: str = user_data.get('chosen_service_name')

    if not chosen_date or not chosen_service_id:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.",
                                         reply_markup=main_menu_keyboard)
        await state.clear()
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    booking_datetime = datetime.combine(chosen_date, datetime.strptime(chosen_time_str, "%H:%M").time())

    await state.update_data(
        chosen_time=chosen_time_str,
        booking_datetime=booking_datetime
    )

    async with session_maker() as session:
        barbers = await db_requests.get_barbers(session)
        if not barbers:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤, —Å—Ä–∞–∑—É –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —Å "–õ—é–±—ã–º –º–∞—Å—Ç–µ—Ä–æ–º"
            await state.update_data(barber_id=None, barber_name="–õ—é–±–æ–π –º–∞—Å—Ç–µ—Ä")
            final_card_text, final_card_keyboard = get_final_booking_card_content(
                service_name=chosen_service_name,
                chosen_date=chosen_date,
                chosen_time=chosen_time_str,
                barber_name="–õ—é–±–æ–π –º–∞—Å—Ç–µ—Ä"
            )
            await callback.message.edit_text(final_card_text, reply_markup=final_card_keyboard)
            await state.set_state(BookingState.confirmingBooking)
        else:
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:",
                reply_markup=barbers_keyboard(barbers)
            )
            await state.set_state(BookingState.choosingBarber)
    await callback.answer()

@appointment_router.callback_query(BookingState.choosingBarber, F.data.startswith("chooseBarber_"))
async def handler_choose_barber(callback: CallbackQuery, state: FSMContext, session_maker: callable):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–ø–∏—Å–∏.
    """
    barber_id_str = callback.data.split("_")[1]
    barber_id = int(barber_id_str) if barber_id_str != "any" else None

    user_data = await state.get_data()
    chosen_service_name: str = user_data.get('chosen_service_name')
    chosen_date: date = user_data.get('chosen_date')
    chosen_time_str: str = user_data.get('chosen_time')
    booking_datetime: datetime = user_data.get('booking_datetime')

    barber_name = "–õ—é–±–æ–π –º–∞—Å—Ç–µ—Ä"
    if barber_id:
        async with session_maker() as session:
            barber = await db_requests.get_barber_by_id(session, barber_id)
            if barber:
                barber_name = barber.name

    await state.update_data(barber_id=barber_id, barber_name=barber_name)

    final_card_text, final_card_keyboard = get_final_booking_card_content(
        service_name=chosen_service_name,
        chosen_date=chosen_date,
        chosen_time=chosen_time_str,
        barber_name=barber_name
    )

    await callback.message.edit_text(final_card_text, reply_markup=final_card_keyboard)
    await state.set_state(BookingState.confirmingBooking)
    await callback.answer()


@appointment_router.callback_query(BookingState.confirmingBooking, F.data == "confirmBooking")
async def handler_confirm_final_booking(callback: CallbackQuery, state: FSMContext, session_maker: callable):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î.
    """
    user_data = await state.get_data()
    user_id = callback.from_user.id
    service_id = user_data.get('chosen_service_id')
    booking_datetime = user_data.get('booking_datetime')
    barber_id = user_data.get('barber_id')
    chosen_service_name = user_data.get('chosen_service_name')
    barber_name = user_data.get('barber_name')

    if not service_id or not booking_datetime:
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                                         reply_markup=main_menu_keyboard)
        await state.clear()
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏.", show_alert=True)
        return

    async with session_maker() as session:
        try:
            new_booking = await db_requests.create_booking(
                session,
                user_id=user_id,
                service_id=service_id,
                booking_date=booking_datetime,
                barber_id=barber_id
            )
            await callback.message.edit_text(
                f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!\n"
                f"–Ø –æ—Ç–ø—Ä–∞–≤–ª—é –í–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–≤–∞ —á–∞—Å–∞ –¥–æ —Å—Ç—Ä–∏–∂–∫–∏.\n\n"
                f"–£—Å–ª—É–≥–∞: <b>{chosen_service_name}</b>\n"
                f"–î–∞—Ç–∞: <b>{new_booking.booking_date.strftime('%d.%m.%Y')}</b>\n"
                f"–í—Ä–µ–º—è: <b>{new_booking.booking_date.strftime('%H:%M')}</b>\n"
                f"–ú–∞—Å—Ç–µ—Ä: <b>{barber_name}</b>\n\n"
                f"–û—Å—Ç–∞—é—Ç—Å—è —Ñ–æ—Ç–æ –∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏."
            )
            await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
            await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                             reply_markup=main_menu_keyboard)
            await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏.", show_alert=True)
        finally:
            await state.clear()


@appointment_router.callback_query(BookingState.confirmingBooking, F.data == "deleteBooking")
async def handler_delete_final_booking(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.
    """
    await callback.message.edit_text("–í—ã —É–¥–∞–ª–∏–ª–∏ –∑–∞–ø–∏—Å—å.")
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    await state.clear()
    await callback.answer("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")


@appointment_router.callback_query(F.data == "cancelForm")
async def handler_cancel_form(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ª—é–±–æ–π —Ñ–æ—Ä–º—ã.
    """
    await state.clear()
    await callback.message.edit_text("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard)
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")


@appointment_router.callback_query(F.data == "mainMenu")
async def handler_main_menu_inline(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    await state.clear()
    await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    await callback.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")


@appointment_router.callback_query(F.data == "ignore")
async def handler_ignore_callback(callback: CallbackQuery):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è "–ø—É—Å—Ç—ã—Ö" –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—é—Ç.
    """
    await callback.answer()


@appointment_router.callback_query(BookingState.choosingDate, F.data == "skipDate")
async def handler_skip_date(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.
    """
    await state.clear()
    await callback.message.edit_text("–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –≤—ã–±–æ—Ä –¥–∞—Ç—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                                     reply_markup=main_menu_keyboard)
    await callback.answer()


@appointment_router.callback_query(F.data == "backToMainMenu")
async def handler_back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await state.clear()
    await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    await callback.answer()


@appointment_router.callback_query(F.data == "backToServices")
async def handler_back_to_services(callback: CallbackQuery, state: FSMContext, session_maker: callable):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏.
    """
    async with session_maker() as session:
        services = await db_requests.get_services(session)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=services_keyboard(services))
        await state.set_state(BookingState.choosingService)
        await callback.answer()


@appointment_router.callback_query(F.data == "backToDateSelection")
async def handler_back_to_date_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã.
    """
    current_state_data = await state.get_data()
    display_date = current_state_data.get('calendar_display_date', date.today())
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=calendar_keyboard(display_date))
    await state.set_state(BookingState.choosingDate)
    await callback.answer()

@appointment_router.callback_query(F.data == "backToTimeSelection")
async def handler_back_to_time_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏.
    """
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=time_slots_keyboard(AVAILABLE_TIME_SLOTS)
    )
    await state.set_state(BookingState.choosingTime)
    await callback.answer()