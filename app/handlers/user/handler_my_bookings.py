from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from datetime import datetime

from app.keyboards.kbreply import main_menu_keyboard
from app.keyboards.kbinline import (
    calendar_keyboard,
    create_bookings_list_keyboard,
    single_booking_details_keyboard
)
from app.database import requests as db_requests
from app.handlers.user.handler_appointment import BookingState  # –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏

my_bookings_router = Router()


@my_bookings_router.message(F.text == "üóì –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def handler_my_bookings_list(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    bookings = await db_requests.getUserBookings(user_id)

    if not bookings:
        await message.answer(
            """–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.""",
            reply_markup=main_menu_keyboard
        )
        return

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –±—É–¥—É—â–∏–µ ‚Üí –ø—Ä–æ—à–µ–¥—à–∏–µ
    future_bookings = sorted(
        [b for b in bookings if b.booking_date >= datetime.now()],
        key=lambda x: x.booking_date
    )
    past_bookings = sorted(
        [b for b in bookings if b.booking_date < datetime.now()],
        key=lambda x: x.booking_date,
        reverse=True
    )
    sorted_bookings = future_bookings + past_bookings

    await message.answer(
        """–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ):

–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:""",
        reply_markup=create_bookings_list_keyboard(sorted_bookings, 0)
    )


@my_bookings_router.callback_query(F.data.startswith("bookingsPage_"))
async def handler_paginate_bookings(callback: CallbackQuery):
    """
    –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π.
    """
    page = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    bookings = await db_requests.getUserBookings(user_id)

    future_bookings = sorted(
        [b for b in bookings if b.booking_date >= datetime.now()],
        key=lambda x: x.booking_date
    )
    past_bookings = sorted(
        [b for b in bookings if b.booking_date < datetime.now()],
        key=lambda x: x.booking_date,
        reverse=True
    )
    sorted_bookings = future_bookings + past_bookings

    await callback.message.edit_reply_markup(
        reply_markup=create_bookings_list_keyboard(sorted_bookings, page)
    )
    await callback.answer()


@my_bookings_router.callback_query(F.data.startswith("viewBooking_"))
async def handler_view_single_booking(callback: CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏.
    """
    booking_id = int(callback.data.split("_")[1])
    booking = await db_requests.getBookingById(booking_id)

    if not booking or booking.user.user_id != callback.from_user.id:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        await callback.message.edit_text(
            """–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.""",
            reply_markup=main_menu_keyboard
        )
        return

    service_name = booking.service.name if booking.service else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞"
    barber_name = booking.barber.name if booking.barber else "–õ—é–±–æ–π –º–∞—Å—Ç–µ—Ä"
    booking_time_str = booking.booking_date.strftime('%d.%m.%Y %H:%M')

    booking_info_text = f"""
<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏:</b>

–£—Å–ª—É–≥–∞: <b>{service_name}</b>
–ú–∞—Å—Ç–µ—Ä: <b>{barber_name}</b>
–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: <b>{booking_time_str}</b>
–°—Ç–∞—Ç—É—Å: <b>{booking.status}</b>
"""

    await callback.message.edit_text(
        booking_info_text,
        reply_markup=single_booking_details_keyboard(booking)
    )
    await callback.answer()


@my_bookings_router.callback_query(F.data.startswith("cancelSingleBooking_"))
async def handler_cancel_single_booking(callback: CallbackQuery):
    """
    –û—Ç–º–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏.
    """
    booking_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    booking = await db_requests.getBookingById(booking_id)
    if not booking or booking.user.user_id != user_id:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        await callback.message.edit_text(
            """–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.""",
            reply_markup=main_menu_keyboard
        )
        return

    if booking.booking_date < datetime.now():
        await callback.answer("–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –∑–∞–ø–∏—Å—å.", show_alert=True)
        return

    success = await db_requests.cancelBooking(booking_id)
    if success:
        await callback.message.edit_text("""‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.""")
    else:
        await callback.message.edit_text("""–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.""")

    await callback.message.answer(
        """–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.""",
        reply_markup=main_menu_keyboard
    )
    await callback.answer()


@my_bookings_router.callback_query(F.data.startswith("repeatBooking_"))
async def handler_repeat_booking(callback: CallbackQuery, state):
    """
    –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å ‚Äî —Ç—É—Ç –Ω—É–∂–Ω–æ FSM –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.
    """
    booking_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    original_booking = await db_requests.getBookingById(booking_id)
    if not original_booking or original_booking.user.user_id != user_id:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        await callback.message.edit_text(
            """–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.""",
            reply_markup=main_menu_keyboard
        )
        return

    # –¢—É—Ç –≤—ã–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å (–ø—Ä–∏–º–µ—Ä)
    await state.set_state(BookingState.choose_date)
    await callback.message.edit_text(
        """–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏:""",
        reply_markup=calendar_keyboard()
    )
    await callback.answer()
