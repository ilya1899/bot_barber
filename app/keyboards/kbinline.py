from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import date, timedelta, datetime
import calendar
from typing import List, Tuple, Optional  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω Optional

from app.database.models import Service, Booking, Barber  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –º–æ–¥–µ–ª–∏
from config import BOOKINGS_PER_PAGE


def services_keyboard(services: List[Service]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Å–ª—É–≥."""
    builder = InlineKeyboardBuilder()
    for service in services:
        builder.add(InlineKeyboardButton(text=service.name, callback_data=f"chooseService_{service.id}"))
    builder.adjust(1)
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="backToMainMenu"))
    return builder.as_markup()


def calendar_keyboard(current_date: date = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∏ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã.
    """
    if current_date is None:
        current_date = date.today()

    builder = InlineKeyboardBuilder()
    today = date.today()

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–æ–¥—É –∏ –º–µ—Å—è—Ü—É
    month_name = current_date.strftime('%B').capitalize()  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞

    builder.row(
        InlineKeyboardButton(text=f"¬´ {current_date.year - 1}", callback_data=f"navigateYear_{current_date.year - 1}"),
        InlineKeyboardButton(text=f"{current_date.year}", callback_data="ignore"),
        InlineKeyboardButton(text=f"{current_date.year + 1} ¬ª", callback_data=f"navigateYear_{current_date.year + 1}"),
        width=3  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–∫–∞–∑—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É
    )
    builder.row(
        InlineKeyboardButton(text="¬´",
                             callback_data=f"navigateMonth_{(current_date.replace(day=1) - timedelta(days=1)):%Y-%m}"),
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
        InlineKeyboardButton(text=f"{month_name} {current_date.year}", callback_data="ignore"),
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–µ—Å—è—Ü –∏ –≥–æ–¥
        InlineKeyboardButton(text="¬ª",
                             callback_data=f"navigateMonth_{(current_date.replace(day=28) + timedelta(days=4)):%Y-%m}"),
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
        width=3  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–∫–∞–∑—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É
    )

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    builder.row(*[InlineKeyboardButton(text=day, callback_data="ignore") for day in weekdays],
                width=7)  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–∫–∞–∑—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É

    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    first_day_of_month = current_date.replace(day=1)
    start_day_of_week = first_day_of_month.weekday()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏, –µ—Å–ª–∏ –º–µ—Å—è—Ü –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–µ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    for _ in range(start_day_of_week):
        builder.add(InlineKeyboardButton(text=" ", callback_data="ignore"))

    num_days_in_month = (current_date.replace(month=current_date.month % 12 + 1, day=1) - timedelta(days=1)).day

    for day_num in range(1, num_days_in_month + 1):
        day = current_date.replace(day=day_num)
        callback_data = f"chooseDate_{day:%Y-%m-%d}"
        button_text = str(day_num)

        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–∞—Ç
        if day < today:
            builder.add(InlineKeyboardButton(text=" ", callback_data="ignore"))  # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        else:
            if day == today:
                button_text = f"[{day_num}]"  # –û–±–æ–∑–Ω–∞—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
            builder.add(InlineKeyboardButton(text=button_text, callback_data=callback_data))

    builder.adjust(7)  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–Ω–∏ –ø–æ 7 —Å—Ç–æ–ª–±—Ü–∞–º

    # –ù–∏–∂–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="backToServices"))
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="cancelForm"))

    return builder.as_markup()


def time_slots_keyboard(available_times: list[str]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏."""
    builder = InlineKeyboardBuilder()
    for time_slot in available_times:
        builder.add(InlineKeyboardButton(text=time_slot, callback_data=f"chooseTime_{time_slot}"))
    builder.adjust(4)
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="backToDateSelection"))
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="cancelForm"))
    return builder.as_markup()


def barbers_keyboard(barbers: List[Barber]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –º–∞—Å—Ç–µ—Ä–æ–≤."""
    builder = InlineKeyboardBuilder()
    for barber in barbers:
        builder.add(InlineKeyboardButton(text=barber.name, callback_data=f"chooseBarber_{barber.id}"))
    builder.add(InlineKeyboardButton(text="–õ—é–±–æ–π –º–∞—Å—Ç–µ—Ä", callback_data="chooseBarber_any"))
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="backToTimeSelection"))
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="cancelForm"))
    return builder.as_markup()


menu_inline_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="mainMenu")]
    ]
)

continue_registration_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continueRegistration")]
    ]
)


def final_booking_card_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏."""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="confirmBooking"))
    builder.add(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="deleteBooking"))
    builder.adjust(2)
    return builder.as_markup()


def get_final_booking_card_content(service_name: str, chosen_date: date, chosen_time: str, barber_name: str) -> Tuple[
    str, InlineKeyboardMarkup]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–ø–∏—Å–∏."""
    final_card_text = (
        f"<b>–ò—Ç–æ–≥–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–ø–∏—Å–∏:</b>\n\n"
        f"–£—Å–ª—É–≥–∞: <b>{service_name}</b>\n"
        f"–î–∞—Ç–∞: <b>{chosen_date.strftime('%d.%m.%Y')}</b>\n"
        f"–í—Ä–µ–º—è: <b>{chosen_time}</b>\n"
        f"–ú–∞—Å—Ç–µ—Ä: <b>{barber_name}</b>\n\n"
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ?"
    )

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="confirmBooking"))
    builder.add(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="deleteBooking"))
    builder.adjust(2)

    return final_card_text, builder.as_markup()


def create_bookings_list_keyboard(bookings: List[Booking], page: int = 0) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    builder = InlineKeyboardBuilder()
    start_index = page * BOOKINGS_PER_PAGE
    end_index = start_index + BOOKINGS_PER_PAGE

    current_page_bookings = bookings[start_index:end_index]

    if not current_page_bookings and page > 0 and len(bookings) > 0:
        page = (len(bookings) - 1) // BOOKINGS_PER_PAGE
        start_index = page * BOOKINGS_PER_PAGE
        end_index = start_index + BOOKINGS_PER_PAGE
        current_page_bookings = bookings[start_index:end_index]

    for booking in current_page_bookings:
        service_name = booking.service.name if booking.service else "–£—Å–ª—É–≥–∞"
        barber_name = booking.barber.name if booking.barber else "–ú–∞—Å—Ç–µ—Ä"
        booking_time_str = booking.booking_date.strftime('%d.%m.%Y %H:%M')

        emoji = "‚úÖ" if booking.booking_date < datetime.now() else "üóì"  # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö/–±—É–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π

        button_text = f"{emoji} {service_name} ({booking_time_str})"
        builder.add(InlineKeyboardButton(text=button_text, callback_data=f"viewBooking_{booking.id}"))

    builder.adjust(1)

    total_pages = (len(bookings) + BOOKINGS_PER_PAGE - 1) // BOOKINGS_PER_PAGE
    if total_pages > 1:
        pagination_row = []
        if page > 0:
            pagination_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"bookingsPage_{page - 1}"))

        pagination_row.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="ignore"))

        if page < total_pages - 1:
            pagination_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"bookingsPage_{page + 1}"))

        builder.row(*pagination_row)

    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="backToMainMenu"))
    return builder.as_markup()


def single_booking_details_keyboard(booking: Booking) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏."""
    builder = InlineKeyboardBuilder()
    if booking.booking_date >= datetime.now():
        builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancelSingleBooking_{booking.id}"))
    else:
        builder.add(InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"repeatBooking_{booking.id}"))

    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="backToBookingsList"))
    builder.adjust(1)
    return builder.as_markup()


def create_services_list_keyboard(services: List[Service], current_page: int = 0,
                                  services_per_page: int = BOOKINGS_PER_PAGE) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Å–ª—É–≥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —á–∞—Å—Ç—å)."""
    builder = InlineKeyboardBuilder()

    start_index = current_page * services_per_page
    end_index = start_index + services_per_page

    services_on_page = services[start_index:end_index]

    for service in services_on_page:
        builder.button(text=service.name, callback_data=f"viewService_{service.id}")

    total_pages = (len(services) + services_per_page - 1) // services_per_page
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"servicesPage_{current_page - 1}"))
    else:
        nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    nav_buttons.append(InlineKeyboardButton(text=f"{current_page + 1}/{total_pages}", callback_data="ignore"))

    if current_page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"servicesPage_{current_page + 1}"))
    else:
        nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    builder.row(*nav_buttons)

    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="mainMenu")
    )

    return builder.as_markup()


def single_service_details_keyboard(service_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –æ–¥–Ω–æ–π —É—Å–ª—É–≥–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —á–∞—Å—Ç—å)."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üíà –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç—É —É—Å–ª—É–≥—É", callback_data=f"bookService_{service_id}")
    )
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="backToServicesList"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mainMenu")
    )
    return builder.as_markup()


def support_inline_keyboard(manager_username: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=f"https://t.me/{manager_username}"))
    builder.adjust(1)
    return builder.as_markup()


# --- Admin Keyboards ---
def admin_services_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="adminAddService"))
    builder.row(InlineKeyboardButton(text="üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏", callback_data="adminViewServices"))
    builder.row(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="adminDeleteService"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="adminBackToAdminMenu"))
    return builder.as_markup()


def admin_add_service_confirm_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏."""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data="adminConfirmAddService"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="adminCancelAddService"))
    builder.adjust(2)
    return builder.as_markup()


def admin_services_list_action_keyboard(services: List[Service], action_prefix: str, current_page: int = 0,
                                        services_per_page: int = BOOKINGS_PER_PAGE) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Å–ª—É–≥ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–π (–ø—Ä–æ—Å–º–æ—Ç—Ä, —É–¥–∞–ª–µ–Ω–∏–µ).
    `action_prefix` –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å–ª—É–≥–∏.
    """
    builder = InlineKeyboardBuilder()

    start_index = current_page * services_per_page
    end_index = start_index + services_per_page

    services_on_page = services[start_index:end_index]

    for service in services_on_page:
        builder.button(text=service.name, callback_data=f"{action_prefix}_{service.id}")

    total_pages = (len(services) + services_per_page - 1) // services_per_page
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"{action_prefix}Page_{current_page - 1}"))
    else:
        nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    nav_buttons.append(InlineKeyboardButton(text=f"{current_page + 1}/{total_pages}", callback_data="ignore"))

    if current_page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"{action_prefix}Page_{current_page + 1}"))
    else:
        nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    builder.row(*nav_buttons)

    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="adminBackToServiceMenu")
    )

    return builder.as_markup()


def admin_single_service_view_keyboard(service_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –æ–¥–Ω–æ–π —É—Å–ª—É–≥–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"adminDeleteServiceConfirm_{service_id}"))
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="adminViewServices"))  # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥
    return builder.as_markup()


def admin_confirm_delete_service_keyboard(service_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏."""
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"adminExecuteDeleteService_{service_id}"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="adminViewServices"))  # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥
    builder.adjust(2)
    return builder.as_markup()


def adminMastersMenuKeyboard() -> InlineKeyboardMarkup:
    """Creates an inline keyboard for the master management menu in the admin panel."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data="adminAddMaster"))
    builder.row(InlineKeyboardButton(text="üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤", callback_data="adminViewMasters"))
    builder.row(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data="adminDeleteMaster"))
    builder.row(InlineKeyboardButton(text="üèñÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–ø—É—Å–∫", callback_data="adminMasterVacation"))  # New button
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="adminBackToAdminMenuFromMasters"))
    return builder.as_markup()


def adminAddMasterConfirmKeyboard() -> InlineKeyboardMarkup:
    """Creates an inline keyboard for confirming adding a master."""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data="adminConfirmAddMaster"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="adminCancelAddMaster"))
    builder.adjust(2)
    return builder.as_markup()


def adminMastersListActionKeyboard(barbers: List[Barber], action_prefix: str, currentPage: int = 0,
                                   itemsPerPage: int = BOOKINGS_PER_PAGE) -> InlineKeyboardMarkup:
    """
    Creates an inline keyboard with a paginated list of barbers for various admin actions.
    `action_prefix` determines the action when a barber is selected (e.g., "adminViewMaster", "adminSelectDeleteMaster").
    """
    builder = InlineKeyboardBuilder()

    startIndex = currentPage * itemsPerPage
    endIndex = startIndex + itemsPerPage

    barbersOnPage = barbers[startIndex:endIndex]

    for barber in barbersOnPage:
        builder.button(text=barber.name, callback_data=f"{action_prefix}_{barber.id}")

    totalPages = (len(barbers) + itemsPerPage - 1) // itemsPerPage
    navButtons = []
    if currentPage > 0:
        navButtons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"{action_prefix}Page_{currentPage - 1}"))
    else:
        navButtons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    navButtons.append(InlineKeyboardButton(text=f"{currentPage + 1}/{totalPages}", callback_data="ignore"))

    if currentPage < totalPages - 1:
        navButtons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"{action_prefix}Page_{currentPage + 1}"))
    else:
        navButtons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    builder.row(*navButtons)

    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="adminBackToMastersMenu")  # Back to masters menu
    )

    return builder.as_markup()


def adminSingleMasterViewKeyboard(masterId: int) -> InlineKeyboardMarkup:
    """Creates an inline keyboard for viewing details of a single master in the admin panel."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"adminConfirmDeleteMaster_{masterId}"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="adminViewMasters"))  # Back to list
    return builder.as_markup()


def adminConfirmDeleteMasterKeyboard(masterId: int) -> InlineKeyboardMarkup:
    """Creates an inline keyboard for confirming the deletion of a master."""
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"adminExecuteDeleteMaster_{masterId}"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="adminViewMasters"))  # Back to list
    builder.adjust(2)
    return builder.as_markup()


def adminMasterServicesSelectionKeyboard(services: List[Service],
                                         selectedServiceIds: List[int]) -> InlineKeyboardMarkup:
    """
    Creates an inline keyboard for selecting services provided by a master.
    Selected services are marked with a checkmark.
    """
    builder = InlineKeyboardBuilder()
    for service in services:
        checkmark = "‚úÖ " if service.id in selectedServiceIds else ""
        builder.add(InlineKeyboardButton(text=f"{checkmark}{service.name}",
                                         callback_data=f"adminToggleMasterService_{service.id}"))
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä —É—Å–ª—É–≥", callback_data="adminConfirmMasterServices"))
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞",
                                     callback_data="adminCancelAddMaster"))  # Generic cancel
    return builder.as_markup()


def adminMasterVacationCalendarKeyboard(currentDate: date = None, minDate: date = None) -> InlineKeyboardMarkup:
    """
    Creates an inline calendar keyboard for selecting vacation dates for a master.
    `minDate` can be used to prevent selecting dates before a certain point (e.g., start date).
    """
    if currentDate is None:
        currentDate = date.today()
    if minDate is None:
        minDate = date.today()

    builder = InlineKeyboardBuilder()

    # Navigation buttons for year
    builder.row(
        InlineKeyboardButton(text=f"¬´ {currentDate.year - 1}",
                             callback_data=f"adminVacationNavigateYear_{currentDate.year - 1}"),
        InlineKeyboardButton(text=f"{currentDate.year}", callback_data="ignore"),
        InlineKeyboardButton(text=f"{currentDate.year + 1} ¬ª",
                             callback_data=f"adminVacationNavigateYear_{currentDate.year + 1}")
    )
    # Navigation buttons for month
    builder.row(
        InlineKeyboardButton(text="¬´ –ü—Ä–µ–¥—ã–¥—É—â–∏–π",
                             callback_data=f"adminVacationNavigateMonth_{currentDate.replace(day=1) - timedelta(days=1):%Y-%m}"),
        InlineKeyboardButton(text=f"{currentDate.strftime('%B')}", callback_data="ignore"),
        InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π ¬ª",
                             callback_data=f"adminVacationNavigateMonth_{currentDate.replace(day=28) + timedelta(days=4):%Y-%m}")
    )

    # Weekday headers
    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    builder.row(*[InlineKeyboardButton(text=day, callback_data="ignore") for day in weekdays])

    # Days of the month
    firstDayOfMonth = currentDate.replace(day=1)
    startDayOfWeek = firstDayOfMonth.weekday()

    for _ in range(startDayOfWeek):
        builder.add(InlineKeyboardButton(text=" ", callback_data="ignore"))

    numDaysInMonth = (currentDate.replace(month=currentDate.month % 12 + 1, day=1) - timedelta(days=1)).day
    for dayNum in range(1, numDaysInMonth + 1):
        day = currentDate.replace(day=dayNum)
        # Disable past dates or dates before minDate
        if day < minDate:
            builder.add(InlineKeyboardButton(text=str(dayNum), callback_data="ignore"))
        else:
            callback_data = f"adminVacationDate_{day:%Y-%m-%d}"
            builder.add(InlineKeyboardButton(text=str(dayNum), callback_data=callback_data))

    builder.adjust(7)

    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="adminCancelOperation"))  # Generic cancel
    return builder.as_markup()


def adminMasterVacationConfirmKeyboard() -> InlineKeyboardMarkup:
    """Creates an inline keyboard for confirming the master's vacation period."""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="adminConfirmVacation"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="adminCancelVacation"))
    builder.adjust(2)
    return builder.as_markup()


def adminStatisticsCategoryKeyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –£—Å–ª—É–≥–∏, –ú–∞—Å—Ç–µ—Ä–∞).
    """
    buttons = [
        [
            InlineKeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="adminSelectStatCategory_users"),
            InlineKeyboardButton(text="–£—Å–ª—É–≥–∏", callback_data="adminSelectStatCategory_services")
        ],
        [
            InlineKeyboardButton(text="–ú–∞—Å—Ç–µ—Ä–∞", callback_data="adminSelectStatCategory_masters")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adminBackToAdminMenuFromStatistics")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def adminStatisticsTimePeriodKeyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–î–µ–Ω—å, –ù–µ–¥–µ–ª—è, –ú–µ—Å—è—Ü, –ì–æ–¥, –í—Å—ë –≤—Ä–µ–º—è, –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ).
    """
    buttons = [
        [
            InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="adminSelectTimePeriod_day"),
            InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="adminSelectTimePeriod_week")
        ],
        [
            InlineKeyboardButton(text="–ú–µ—Å—è—Ü", callback_data="adminSelectTimePeriod_month"),
            InlineKeyboardButton(text="–ì–æ–¥", callback_data="adminSelectTimePeriod_year")
        ],
        [
            InlineKeyboardButton(text="–í—Å—ë –≤—Ä–µ–º—è", callback_data="adminSelectTimePeriod_all_time"),
            InlineKeyboardButton(text="–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ", callback_data="adminSelectTimePeriod_custom")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adminBackToStatCategorySelection")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def adminStatisticsCalendarKeyboard(current_date: date = None, min_date: date = None,
                                    max_date: date = None) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.
    current_date: –î–∞—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
    min_date: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ (–¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ).
    max_date: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ (–¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ).
    """
    if current_date is None:
        current_date = date.today()

    today = date.today()

    keyboard = []

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–æ–¥—É
    year_buttons = [
        InlineKeyboardButton(text="< –ì–æ–¥", callback_data=f"adminStatCalYear_{current_date.year - 1}"),
        InlineKeyboardButton(text=f"{current_date.year}", callback_data="adminStatCalIgnore"),
        InlineKeyboardButton(text="–ì–æ–¥ >", callback_data=f"adminStatCalYear_{current_date.year + 1}")
    ]
    keyboard.append(year_buttons)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü—É
    month_buttons = [
        InlineKeyboardButton(text="< –ú–µ—Å—è—Ü",
                             callback_data=f"adminStatCalMonth_{(current_date.replace(day=1) - timedelta(days=1)).strftime('%Y-%m')}"),
        InlineKeyboardButton(text=f"{current_date.strftime('%B %Y')}", callback_data="adminStatCalIgnore"),
        InlineKeyboardButton(text="–ú–µ—Å—è—Ü >",
                             callback_data=f"adminStatCalMonth_{(current_date.replace(day=28) + timedelta(days=4)).replace(day=1).strftime('%Y-%m')}")
    ]
    keyboard.append(month_buttons)

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append([InlineKeyboardButton(text=day, callback_data="adminStatCalIgnore") for day in week_days])

    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    first_day_of_month = current_date.replace(day=1)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º –¥–Ω–µ–º –º–µ—Å—è—Ü–∞ (–ü–Ω=0, –í—Å=6)
    start_offset = (first_day_of_month.weekday()) % 7  # –ï—Å–ª–∏ –ü–Ω=0, —Ç–æ 0. –ï—Å–ª–∏ –í—Å=6, —Ç–æ 6.

    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏, –µ—Å–ª–∏ –º–µ—Å—è—Ü –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–µ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    current_week = [InlineKeyboardButton(text=" ", callback_data="adminStatCalIgnore")] * start_offset

    for day in range(1, (current_date.replace(month=current_date.month % 12 + 1, day=1) - timedelta(days=1)).day + 1):
        current_day = date(current_date.year, current_date.month, day)
        button_text = str(day)
        callback_data = f"adminStatCalDate_{current_day.strftime('%Y-%m-%d')}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        is_disabled = False
        if min_date and current_day < min_date:
            is_disabled = True
        if max_date and current_day > max_date:  # –ó–¥–µ—Å—å –æ–±—ã—á–Ω–æ max_date –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª–∞, –Ω–æ –¥–ª—è –∫–æ–Ω—Ü–∞ –¥–∞
            is_disabled = True

        # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞
        if current_day == today:
            button_text = f"[{day}]"

        if is_disabled:
            current_week.append(InlineKeyboardButton(text=" ", callback_data="adminStatCalIgnore"))  # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        else:
            current_week.append(InlineKeyboardButton(text=button_text, callback_data=callback_data))

        if len(current_week) == 7:
            keyboard.append(current_week)
            current_week = []

    if current_week:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è –Ω–µ–ø–æ–ª–Ω–∞—è
        while len(current_week) < 7:
            current_week.append(InlineKeyboardButton(text=" ", callback_data="adminStatCalIgnore"))
        keyboard.append(current_week)

    keyboard.append(
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adminBackToTimePeriodSelection")])  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def adminCalendarKeyboard(current_date: date = None) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∏ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã.
    """
    if current_date is None:
        current_date = date.today()

    today = date.today()

    keyboard = []

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–æ–¥—É
    year_buttons = [
        InlineKeyboardButton(text=f"¬´ {current_date.year - 1}", callback_data=f"adminCalYear_{current_date.year - 1}"),
        InlineKeyboardButton(text=f"{current_date.year}", callback_data="ignore"),
        InlineKeyboardButton(text=f"{current_date.year + 1} ¬ª", callback_data=f"adminCalYear_{current_date.year + 1}")
    ]
    keyboard.append(year_buttons)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü—É
    month_buttons = [
        InlineKeyboardButton(text="¬´ –ü—Ä–µ–¥—ã–¥—É—â–∏–π",
                             callback_data=f"adminCalMonth_{(current_date.replace(day=1) - timedelta(days=1)).strftime('%Y-%m')}"),
        InlineKeyboardButton(text=f"{current_date.strftime('%B %Y')}", callback_data="ignore"),
        InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π ¬ª",
                             callback_data=f"adminCalMonth_{(current_date.replace(day=28) + timedelta(days=4)).replace(day=1).strftime('%Y-%m')}")
    ]
    keyboard.append(month_buttons)

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append([InlineKeyboardButton(text=day, callback_data="ignore") for day in week_days])

    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    first_day_of_month = current_date.replace(day=1)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º –¥–Ω–µ–º –º–µ—Å—è—Ü–∞ (–ü–Ω=0, –í—Å=6)
    start_offset = (first_day_of_month.weekday()) % 7

    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏, –µ—Å–ª–∏ –º–µ—Å—è—Ü –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–µ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    current_week = [InlineKeyboardButton(text=" ", callback_data="ignore")] * start_offset

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
    num_days_in_month = (current_date.replace(month=current_date.month % 12 + 1, day=1) - timedelta(days=1)).day

    for day_num in range(1, num_days_in_month + 1):
        current_day = date(current_date.year, current_date.month, day_num)
        button_text = str(day_num)
        callback_data = f"adminCalDate_{current_day.strftime('%Y-%m-%d')}"

        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–∞—Ç
        if current_day < today:
            current_week.append(InlineKeyboardButton(text=" ", callback_data="ignore"))  # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        else:
            if current_day == today:
                button_text = f"[{day_num}]"  # –û–±–æ–∑–Ω–∞—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
            current_week.append(InlineKeyboardButton(text=button_text, callback_data=callback_data))

        if len(current_week) == 7:
            keyboard.append(current_week)
            current_week = []

    if current_week:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è –Ω–µ–ø–æ–ª–Ω–∞—è
        while len(current_week) < 7:
            current_week.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
        keyboard.append(current_week)

    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="adminBackToAdminMenuFromCalendar")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def adminDayBookingsKeyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –∑–∞ –¥–µ–Ω—å —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é".
    """
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="adminBackToCalendarSelection"))
    return builder.as_markup()