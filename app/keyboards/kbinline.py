from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import date, timedelta, datetime
import calendar
from typing import List, Tuple, Optional  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω Optional

from app.database.models import Service, Booking, Barber  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –º–æ–¥–µ–ª–∏
from config import BOOKINGS_PER_PAGE, AVAILABLE_TIME_SLOTS


def services_keyboard(services: List[Service]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Å–ª—É–≥."""
    builder = InlineKeyboardBuilder()
    for service in services:
        builder.add(InlineKeyboardButton(text=service.name, callback_data=f"chooseService_{service.id}"))
    builder.adjust(1)
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="backToMainMenu"))
    return builder.as_markup()


def time_slots_keyboard(chosen_date_str: str, service_id: int):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏.
    :param chosen_date_str: –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'.
    :param service_id: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏.
    :return: InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å–ª–æ—Ç—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –º–∞—Å—Ç–µ—Ä–æ–≤

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
    for time_slot in AVAILABLE_TIME_SLOTS:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º callback_data –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        callback_data = f"chooseTime_{time_slot}_{chosen_date_str}_{service_id}"
        builder.add(InlineKeyboardButton(text=time_slot, callback_data=callback_data))

    builder.adjust(4)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" –∏ "–û—Ç–º–µ–Ω–∞"
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"backToCalendar_{service_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancelForm")
    )

    return builder.as_markup()


def barbers_keyboard(barbers: list, chosen_date_str: str, chosen_time_str: str, service_id: int):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–∞—Å—Ç–µ—Ä–∞–º–∏.
    :param barbers: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Barber.
    :param chosen_date_str: –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'.
    :param chosen_time_str: –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'HH:MM'.
    :param service_id: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏.
    :return: InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    for barber in barbers:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º callback_data –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        callback_data = f"chooseBarber_{barber.id}_{chosen_date_str}_{chosen_time_str}_{service_id}"
        builder.add(InlineKeyboardButton(text=barber.name, callback_data=callback_data))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–õ—é–±–æ–π –º–∞—Å—Ç–µ—Ä"
    builder.add(InlineKeyboardButton(
        text="–õ—é–±–æ–π –º–∞—Å—Ç–µ—Ä",
        callback_data=f"chooseBarber_any_{chosen_date_str}_{chosen_time_str}_{service_id}"
    ))

    builder.adjust(2)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"backToTime_{chosen_date_str}_{service_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancelForm")
    )

    return builder.as_markup()


menu_inline_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚ò∞ –ú–µ–Ω—é", callback_data="mainMenu")]
    ]
)

continue_registration_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continueRegistration")]
    ]
)


def final_booking_card_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏."""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="confirmBooking"))
    builder.add(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="deleteBooking"))
    builder.adjust(2)
    return builder.as_markup()


def create_bookings_list_keyboard(bookings: List[Booking], page: int = 0) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    builder = InlineKeyboardBuilder()
    start_index = page * BOOKINGS_PER_PAGE
    end_index = start_index + BOOKINGS_PER_PAGE

    current_page_bookings = bookings[start_index:end_index]

    if not current_page_bookings and page > 0 and len(bookings) > 0:
        page = (len(bookings) - 1) // BOOKINGS_PER_PAGE
        start_index = page * BOOKINGS_PER_PAGE
        end_index = start_index + BOOKINGS_PER_PAGE
        current_page_bookings = bookings[start_index:end_index]

    for booking in current_page_bookings:
        service_name = booking.service.name if booking.service else "–£—Å–ª—É–≥–∞"
        barber_name = booking.barber.name if booking.barber else "–ú–∞—Å—Ç–µ—Ä"
        booking_time_str = booking.booking_date.strftime('%d.%m.%Y %H:%M')

        emoji = "‚úÖ" if booking.booking_date < datetime.now() else "üóì"  # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö/–±—É–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π

        button_text = f"{emoji} {service_name} ({booking_time_str})"
        builder.add(InlineKeyboardButton(text=button_text, callback_data=f"viewBooking_{booking.id}"))

    builder.adjust(1)

    total_pages = (len(bookings) + BOOKINGS_PER_PAGE - 1) // BOOKINGS_PER_PAGE
    if total_pages > 1:
        pagination_row = []
        if page > 0:
            pagination_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"bookingsPage_{page - 1}"))

        pagination_row.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="ignore"))

        if page < total_pages - 1:
            pagination_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"bookingsPage_{page + 1}"))

        builder.row(*pagination_row)

    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="backToMainMenu"))
    return builder.as_markup()


def single_booking_details_keyboard(booking: Booking) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏."""
    builder = InlineKeyboardBuilder()
    if booking.booking_date >= datetime.now():
        builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancelSingleBooking_{booking.id}"))
    else:
        builder.add(InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"repeatBooking_{booking.id}"))

    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="backToBookingsList"))
    builder.adjust(1)
    return builder.as_markup()


def create_services_list_keyboard(services: List[Service], current_page: int = 0,
                                  services_per_page: int = BOOKINGS_PER_PAGE) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Å–ª—É–≥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —á–∞—Å—Ç—å)."""
    builder = InlineKeyboardBuilder()

    start_index = current_page * services_per_page
    end_index = start_index + services_per_page

    services_on_page = services[start_index:end_index]

    for service in services_on_page:
        builder.button(text=service.name, callback_data=f"viewService_{service.id}")

    total_pages = (len(services) + services_per_page - 1) // services_per_page
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"servicesPage_{current_page - 1}"))
    else:
        nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    nav_buttons.append(InlineKeyboardButton(text=f"{current_page + 1}/{total_pages}", callback_data="ignore"))

    if current_page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"servicesPage_{current_page + 1}"))
    else:
        nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    builder.row(*nav_buttons)

    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="mainMenu")
    )

    return builder.as_markup()


def single_service_details_keyboard(service_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –æ–¥–Ω–æ–π —É—Å–ª—É–≥–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —á–∞—Å—Ç—å)."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üíà –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç—É —É—Å–ª—É–≥—É", callback_data=f"bookService_{service_id}")
    )
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="backToServicesList"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mainMenu")
    )
    return builder.as_markup()


def support_inline_keyboard(manager_username: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=f"https://t.me/{manager_username}"))
    builder.adjust(1)
    return builder.as_markup()


# --- Admin Keyboards ---
def admin_services_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="adminAddService"))
    builder.row(InlineKeyboardButton(text="üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏", callback_data="adminViewServices"))
    builder.row(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="adminDeleteService"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="adminBackToAdminMenu"))
    return builder.as_markup()


def admin_add_service_confirm_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏."""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data="adminConfirmAddService"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="adminCancelAddService"))
    builder.adjust(2)
    return builder.as_markup()


def admin_services_list_action_keyboard(
        services: List,  # –¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å List[Service], –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –º–æ–¥–µ–ª–∏
        base_callback_data: str,
        current_page: int,
        items_per_page: int
) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    :param services: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —É—Å–ª—É–≥.
    :param base_callback_data: –ë–∞–∑–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data –∫–Ω–æ–ø–æ–∫ —É—Å–ª—É–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "adminViewService").
    :param current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0).
    :param items_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    """
    keyboard = []

    total_services = len(services)
    total_pages = (total_services + items_per_page - 1) // items_per_page  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü

    start_index = current_page * items_per_page
    end_index = start_index + items_per_page

    services_on_page = services[start_index:end_index]

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    for service in services_on_page:
        # Callback data –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —É—Å–ª—É–≥–∏ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫: "adminViewService_123"
        keyboard.append([InlineKeyboardButton(text=service.name, callback_data=f"{base_callback_data}_{service.id}")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–ù–∞–∑–∞–¥/–í–ø–µ—Ä–µ–¥) –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    pagination_row = []
    if current_page > 0:
        # Callback data –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: "adminViewServicePage_0"
        pagination_row.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"adminViewServicePage_{current_page - 1}"))

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã / –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    pagination_row.append(
        InlineKeyboardButton(text=f"{current_page + 1}/{total_pages}", callback_data="page_indicator"))

    if current_page < total_pages - 1:
        # Callback data –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: "adminViewServicePage_2"
        pagination_row.append(
            InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"adminViewServicePage_{current_page + 1}"))

    if pagination_row:  # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –Ω–µ–º –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
        keyboard.append(pagination_row)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Å–ª—É–≥
    keyboard.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —É—Å–ª—É–≥", callback_data="admin_back_to_services_menu")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def admin_single_service_view_keyboard(service_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –æ–¥–Ω–æ–π —É—Å–ª—É–≥–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"adminDeleteServiceConfirm_{service_id}"))
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="adminViewServices"))  # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥
    return builder.as_markup()


def admin_confirm_delete_service_keyboard(service_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏."""
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"adminExecuteDeleteService_{service_id}"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="adminViewServices"))  # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥
    builder.adjust(2)
    return builder.as_markup()


def adminMastersMenuKeyboard() -> InlineKeyboardMarkup:
    """Creates an inline keyboard for the master management menu in the admin panel."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data="adminAddMaster"))
    builder.row(InlineKeyboardButton(text="üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤", callback_data="adminViewMasters"))
    builder.row(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data="adminDeleteMaster"))
    builder.row(InlineKeyboardButton(text="üèñÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–ø—É—Å–∫", callback_data="adminMasterVacation"))  # New button
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="adminBackToAdminMenuFromMasters"))
    return builder.as_markup()


def adminAddMasterConfirmKeyboard() -> InlineKeyboardMarkup:
    """Creates an inline keyboard for confirming adding a master."""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data="adminConfirmAddMaster"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="adminCancelAddMaster"))
    builder.adjust(2)
    return builder.as_markup()

MASTERS_PER_PAGE = 5


def getMasterSelectKeyboard(barbers: list, callback_prefix: str, page: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤.

    :param barbers: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤.
    :param callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'adminSelectDeleteMaster').
    :param page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0).
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup.
    """
    keyboard_buttons = []

    total_pages = (len(barbers) + MASTERS_PER_PAGE - 1) // MASTERS_PER_PAGE
    start_index = page * MASTERS_PER_PAGE
    end_index = start_index + MASTERS_PER_PAGE

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    for i in range(start_index, min(end_index, len(barbers))):
        barber = barbers[i]
        keyboard_buttons.append([
            InlineKeyboardButton(text=barber.name, callback_data=f"{callback_prefix}_{barber.id}")
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (—Å—Ç—Ä–µ–ª–∫–∏ –∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"{callback_prefix}Page_{page - 1}"))

    pagination_buttons.append(
        InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="pagination_current_page"))

    if page < total_pages - 1:
        pagination_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"{callback_prefix}Page_{page + 1}"))

    if pagination_buttons:
        keyboard_buttons.append(pagination_buttons)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adminMastersBack")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


def adminConfirmDeleteMasterKeyboard(master_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞.
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"adminExecuteDeleteMaster_{master_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancelDeleteMaster")]
    ])

def adminSingleMasterViewKeyboard(masterId: int) -> InlineKeyboardMarkup:
    """Creates an inline keyboard for viewing details of a single master in the admin panel."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"adminConfirmDeleteMaster_{masterId}"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="adminViewMasters"))  # Back to list
    return builder.as_markup()


def adminConfirmDeleteMasterKeyboard(masterId: int) -> InlineKeyboardMarkup:
    """Creates an inline keyboard for confirming the deletion of a master."""
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"adminExecuteDeleteMaster_{masterId}"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="adminViewMasters"))  # Back to list
    builder.adjust(2)
    return builder.as_markup()


def adminMasterServicesSelectionKeyboard(services: List[Service],
                                         selectedServiceIds: List[int]) -> InlineKeyboardMarkup:
    """
    Creates an inline keyboard for selecting services provided by a master.
    Selected services are marked with a checkmark.
    """
    builder = InlineKeyboardBuilder()
    for service in services:
        checkmark = "‚úÖ " if service.id in selectedServiceIds else ""
        builder.add(InlineKeyboardButton(text=f"{checkmark}{service.name}",
                                         callback_data=f"adminToggleMasterService_{service.id}"))
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä —É—Å–ª—É–≥", callback_data="adminConfirmMasterServices"))
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞",
                                     callback_data="adminCancelAddMaster"))  # Generic cancel
    return builder.as_markup()


MONTHS_RU = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å",
             "–î–µ–∫–∞–±—Ä—å"]


def adminMasterVacationCalendarKeyboard(currentDate: date = None, minDate: date = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç –æ—Ç–ø—É—Å–∫–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–µ –∏ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã.
    `minDate` –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞.
    """
    if currentDate is None:
        currentDate = date.today()
    if minDate is None:
        minDate = date.today()

    builder = InlineKeyboardBuilder()

    # –†—è–¥ 1: –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥–æ–¥—É
    builder.row(
        InlineKeyboardButton(text=f"¬´ {currentDate.year - 1}",
                             callback_data=f"adminVacationNavigateYear_{currentDate.year - 1}"),
        InlineKeyboardButton(text=f"{currentDate.year}", callback_data="ignore"),
        InlineKeyboardButton(text=f"{currentDate.year + 1} ¬ª",
                             callback_data=f"adminVacationNavigateYear_{currentDate.year + 1}")
    )

    # –†—è–¥ 2: –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü—É
    builder.row(
        InlineKeyboardButton(text="¬´",
                             callback_data=f"adminVacationNavigateMonth_{(currentDate.replace(day=1) - timedelta(days=1)):%Y-%m}"),
        InlineKeyboardButton(text=f"{MONTHS_RU[currentDate.month - 1]}", callback_data="ignore"),
        InlineKeyboardButton(text="¬ª",
                             callback_data=f"adminVacationNavigateMonth_{(currentDate.replace(day=28) + timedelta(days=4)):%Y-%m}")
    )

    # –†—è–¥ 3: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    builder.row(*[InlineKeyboardButton(text=day, callback_data="ignore") for day in WEEKDAYS_RU])

    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    firstDayOfMonth = currentDate.replace(day=1)
    startDayOfWeek = firstDayOfMonth.weekday()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏
    for _ in range(startDayOfWeek):
        builder.add(InlineKeyboardButton(text=" ", callback_data="ignore"))

    numDaysInMonth = (currentDate.replace(month=currentDate.month % 12 + 1, day=1) - timedelta(days=1)).day
    for dayNum in range(1, numDaysInMonth + 1):
        day = currentDate.replace(day=dayNum)

        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã
        if day < minDate:
            builder.add(InlineKeyboardButton(text=" ", callback_data="ignore"))
        else:
            callback_data = f"adminVacationDate_{day:%Y-%m-%d}"
            builder.add(InlineKeyboardButton(text=str(dayNum), callback_data=callback_data))

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–Ω–µ–π –ø–æ 7 —Å—Ç–æ–ª–±—Ü–∞–º
    builder.adjust(3, 3, 7, *([7] * 6), 1)

    # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥: –ö–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω—ã
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="adminCancelOperation"))

    return builder.as_markup()


def adminMasterVacationConfirmKeyboard() -> InlineKeyboardMarkup:
    """Creates an inline keyboard for confirming the master's vacation period."""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="adminConfirmVacation"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="adminCancelVacation"))
    builder.adjust(2)
    return builder.as_markup()


def adminStatisticsCategoryKeyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –£—Å–ª—É–≥–∏, –ú–∞—Å—Ç–µ—Ä–∞).
    """
    buttons = [
        [
            InlineKeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="adminSelectStatCategory_users"),
            InlineKeyboardButton(text="–£—Å–ª—É–≥–∏", callback_data="adminSelectStatCategory_services")
        ],
        [
            InlineKeyboardButton(text="–ú–∞—Å—Ç–µ—Ä–∞", callback_data="adminSelectStatCategory_masters")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adminBackToAdminMenuFromStatistics")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def adminStatisticsTimePeriodKeyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–î–µ–Ω—å, –ù–µ–¥–µ–ª—è, –ú–µ—Å—è—Ü, –ì–æ–¥, –í—Å—ë –≤—Ä–µ–º—è, –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ).
    """
    buttons = [
        [
            InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="adminSelectTimePeriod_day"),
            InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="adminSelectTimePeriod_week")
        ],
        [
            InlineKeyboardButton(text="–ú–µ—Å—è—Ü", callback_data="adminSelectTimePeriod_month"),
            InlineKeyboardButton(text="–ì–æ–¥", callback_data="adminSelectTimePeriod_year")
        ],
        [
            InlineKeyboardButton(text="–í—Å—ë –≤—Ä–µ–º—è", callback_data="adminSelectTimePeriod_all_time"),
            InlineKeyboardButton(text="–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ", callback_data="adminSelectTimePeriod_custom")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adminBackToStatCategorySelection")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def adminStatisticsCalendarKeyboard(current_date: date = None, min_date: date = None,
                                    max_date: date = None) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.
    current_date: –î–∞—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
    min_date: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ (–¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ).
    max_date: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ (–¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ).
    """
    if current_date is None:
        current_date = date.today()

    today = date.today()

    keyboard = []

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–æ–¥—É
    year_buttons = [
        InlineKeyboardButton(text="< –ì–æ–¥", callback_data=f"adminStatCalYear_{current_date.year - 1}"),
        InlineKeyboardButton(text=f"{current_date.year}", callback_data="adminStatCalIgnore"),
        InlineKeyboardButton(text="–ì–æ–¥ >", callback_data=f"adminStatCalYear_{current_date.year + 1}")
    ]
    keyboard.append(year_buttons)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü—É
    month_buttons = [
        InlineKeyboardButton(text="< –ú–µ—Å—è—Ü",
                             callback_data=f"adminStatCalMonth_{(current_date.replace(day=1) - timedelta(days=1)).strftime('%Y-%m')}"),
        InlineKeyboardButton(text=f"{current_date.strftime('%B %Y')}", callback_data="adminStatCalIgnore"),
        InlineKeyboardButton(text="–ú–µ—Å—è—Ü >",
                             callback_data=f"adminStatCalMonth_{(current_date.replace(day=28) + timedelta(days=4)).replace(day=1).strftime('%Y-%m')}")
    ]
    keyboard.append(month_buttons)

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append([InlineKeyboardButton(text=day, callback_data="adminStatCalIgnore") for day in week_days])

    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    first_day_of_month = current_date.replace(day=1)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º –¥–Ω–µ–º –º–µ—Å—è—Ü–∞ (–ü–Ω=0, –í—Å=6)
    start_offset = (first_day_of_month.weekday()) % 7  # –ï—Å–ª–∏ –ü–Ω=0, —Ç–æ 0. –ï—Å–ª–∏ –í—Å=6, —Ç–æ 6.

    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏, –µ—Å–ª–∏ –º–µ—Å—è—Ü –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–µ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    current_week = [InlineKeyboardButton(text=" ", callback_data="adminStatCalIgnore")] * start_offset

    for day in range(1, (current_date.replace(month=current_date.month % 12 + 1, day=1) - timedelta(days=1)).day + 1):
        current_day = date(current_date.year, current_date.month, day)
        button_text = str(day)
        callback_data = f"adminStatCalDate_{current_day.strftime('%Y-%m-%d')}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        is_disabled = False
        if min_date and current_day < min_date:
            is_disabled = True
        if max_date and current_day > max_date:  # –ó–¥–µ—Å—å –æ–±—ã—á–Ω–æ max_date –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª–∞, –Ω–æ –¥–ª—è –∫–æ–Ω—Ü–∞ –¥–∞
            is_disabled = True

        # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞
        if current_day == today:
            button_text = f"[{day}]"

        if is_disabled:
            current_week.append(InlineKeyboardButton(text=" ", callback_data="adminStatCalIgnore"))  # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        else:
            current_week.append(InlineKeyboardButton(text=button_text, callback_data=callback_data))

        if len(current_week) == 7:
            keyboard.append(current_week)
            current_week = []

    if current_week:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è –Ω–µ–ø–æ–ª–Ω–∞—è
        while len(current_week) < 7:
            current_week.append(InlineKeyboardButton(text=" ", callback_data="adminStatCalIgnore"))
        keyboard.append(current_week)

    keyboard.append(
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adminBackToTimePeriodSelection")])  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


from datetime import date, timedelta
import calendar
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton



def adminCalendarKeyboard(current_date: date = None) -> InlineKeyboardMarkup:
    """
    –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å —Ä—É—Å—Å–∫–∏–º–∏ –º–µ—Å—è—Ü–∞–º–∏ –∏ –¥–∞—Ç–∞–º–∏:
    ¬´ 2024 | ‚Ä¢ 2025 ‚Ä¢ | 2026 ¬ª
    ¬´ –ò—é–ª—å | ‚Ä¢ –ê–≤–≥—É—Å—Ç ‚Ä¢ | –°–µ–Ω—Ç—è–±—Ä—å ¬ª
    """
    if current_date is None:
        current_date = date.today()

    year = current_date.year
    month = current_date.month
    today = date.today()

    keyboard = []

    # --- 1. –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–æ–¥–∞–º ---
    keyboard.append([
        InlineKeyboardButton(text=f"{year-1}", callback_data=f"adminCalYear_{year-1}_{month}"),
        InlineKeyboardButton(text=f"‚Ä¢ {year} ‚Ä¢", callback_data="ignore"),
        InlineKeyboardButton(text=f"{year+1}", callback_data=f"adminCalYear_{year+1}_{month}")
    ])

    # --- 2. –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º ---
    prev_month = (month - 2) % 12 + 1
    next_month = month % 12 + 1

    keyboard.append([
        InlineKeyboardButton(text=MONTHS_RU[prev_month-1],
                             callback_data=f"adminCalMonth_{year}-{prev_month:02d}"),
        InlineKeyboardButton(text=f"‚Ä¢ {MONTHS_RU[month-1]} ‚Ä¢", callback_data="ignore"),
        InlineKeyboardButton(text=MONTHS_RU[next_month-1],
                             callback_data=f"adminCalMonth_{year}-{next_month:02d}")
    ])

    # --- 3. –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ ---
    keyboard.append([InlineKeyboardButton(text=day, callback_data="ignore") for day in WEEKDAYS_RU])

    # --- 4. –°–µ—Ç–∫–∞ –¥–Ω–µ–π –º–µ—Å—è—Ü–∞ ---
    cal = calendar.Calendar(firstweekday=calendar.MONDAY)
    for week in cal.monthdayscalendar(year, month):
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
            else:
                day_date = date(year, month, day)
                if day_date < today:
                    row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
                else:
                    btn_text = f"[{day}]" if day_date == today else str(day)
                    row.append(
                        InlineKeyboardButton(
                            text=btn_text,
                            callback_data=f"adminCalDate_{day_date.strftime('%Y-%m-%d')}"
                        )
                    )
        keyboard.append(row)

    # --- 5. –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ ---
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="adminBackToAdminMenuFromCalendar")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)



def adminDayBookingsKeyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –∑–∞ –¥–µ–Ω—å —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é".
    """
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="adminBackToCalendarSelection"))
    return builder.as_markup()



# –†—É—Å—Å–∫–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
WEEKDAYS_RU = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]


def calendar_keyboard(current_date: date = None, service_id: int = None) -> InlineKeyboardMarkup:
    """
    –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    ¬´ 2024 | ‚Ä¢ 2025 ‚Ä¢ | 2026 ¬ª
    ¬´ –ò—é–ª—å | ‚Ä¢ –ê–≤–≥—É—Å—Ç ‚Ä¢ | –°–µ–Ω—Ç—è–±—Ä—å ¬ª
    """
    if current_date is None:
        current_date = date.today()

    year = current_date.year
    month = current_date.month
    today = date.today()

    builder = InlineKeyboardBuilder()

    # --- 1. –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–æ–¥–∞–º ---
    builder.row(
        InlineKeyboardButton(text=f"{year-1}", callback_data=f"navigateYear_{year-1}_{month}_{service_id}"),
        InlineKeyboardButton(text=f"‚Ä¢ {year} ‚Ä¢", callback_data="ignore"),
        InlineKeyboardButton(text=f"{year+1}", callback_data=f"navigateYear_{year+1}_{month}_{service_id}")
    )

    # --- 2. –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º ---
    prev_month = (month - 2) % 12 + 1  # –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    next_month = month % 12 + 1        # —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü

    builder.row(
        InlineKeyboardButton(
            text=f"{MONTHS_RU[prev_month-1]}",
            callback_data=f"navigateMonth_{year}-{prev_month:02d}_{service_id}"
        ),
        InlineKeyboardButton(
            text=f"‚Ä¢ {MONTHS_RU[month-1]} ‚Ä¢",
            callback_data="ignore"
        ),
        InlineKeyboardButton(
            text=f"{MONTHS_RU[next_month-1]}",
            callback_data=f"navigateMonth_{year}-{next_month:02d}_{service_id}"
        )
    )

    # --- 3. –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ ---
    weekday_buttons = [InlineKeyboardButton(text=day, callback_data="ignore") for day in WEEKDAYS_RU]
    builder.row(*weekday_buttons)

    # --- 4. –°–µ—Ç–∫–∞ –¥–Ω–µ–π –º–µ—Å—è—Ü–∞ ---
    cal = calendar.Calendar(firstweekday=calendar.MONDAY)
    for week in cal.monthdayscalendar(year, month):
        day_buttons = []
        for day in week:
            if day == 0:
                day_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
            else:
                day_date = date(year, month, day)
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ—à–ª—ã–µ –¥–∞—Ç—ã
                if day_date < today:
                    day_buttons.append(InlineKeyboardButton(text=f"~{day}~", callback_data="ignore"))
                else:
                    day_buttons.append(
                        InlineKeyboardButton(
                            text=str(day),
                            callback_data=f"chooseDate_{day_date.strftime('%Y-%m-%d')}_{service_id}"
                        )
                    )
        builder.row(*day_buttons)

    # --- 5. –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ ---
    builder.row(
        InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", callback_data="backToMainMenu")
    )

    return builder.as_markup()


def single_service_details_keyboard_with_nav(
        service_id: int,
        prev_service_id: int = None,
        next_service_id: int = None
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–¥–Ω–æ–π —É—Å–ª—É–≥–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.

    Args:
        service_id (int): ID —Ç–µ–∫—É—â–µ–π —É—Å–ª—É–≥–∏.
        prev_service_id (int): ID –ø—Ä–µ–¥—ã–¥—É—â–µ–π —É—Å–ª—É–≥–∏. –ï—Å–ª–∏ None, –∫–Ω–æ–ø–∫–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è.
        next_service_id (int): ID —Å–ª–µ–¥—É—é—â–µ–π —É—Å–ª—É–≥–∏. –ï—Å–ª–∏ None, –∫–Ω–æ–ø–∫–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è.

    Returns:
        InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —É—Å–ª—É–≥–∞–º–∏
    if prev_service_id is not None:
        builder.button(text="<", callback_data=f"showService_{prev_service_id}")

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é —É—Å–ª—É–≥—É
    builder.button(text="‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"bookService_{service_id}")

    if next_service_id is not None:
        builder.button(text=">", callback_data=f"showService_{next_service_id}")

    builder.adjust(3)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    builder.row(InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="cancelForm"))

    return builder.as_markup()


def get_final_booking_card_content(
        service_name: str,
        chosen_date: datetime.date,
        chosen_time: str,
        barber_name: str,
        service_id: int,
        barber_id: int | None
) -> Tuple[str, InlineKeyboardMarkup]:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.
    """
    card_text = (
        f"üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏**\n"
        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        f"**–£—Å–ª—É–≥–∞:** {service_name}\n"
        f"**–î–∞—Ç–∞:** {chosen_date.strftime('%d.%m.%Y')}\n"
        f"**–í—Ä–µ–º—è:** {chosen_time}\n"
        f"**–ú–∞—Å—Ç–µ—Ä:** {barber_name}\n"
        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å."
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    callback_data = f"confirmBooking_{service_id}_{chosen_date.strftime('%Y-%m-%d')}_{chosen_time}_{barber_id}"

    confirm_button = InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=callback_data)
    cancel_button = InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancelBooking")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [confirm_button],
        [cancel_button]
    ])

    return card_text, keyboard


def backToMastersKeyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–∞—Å—Ç–µ—Ä–æ–≤.
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adminViewMasters")]
    ])